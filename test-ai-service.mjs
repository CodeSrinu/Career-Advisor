// Simple test to verify AI API route behavior\nimport { config } from 'dotenv';\nimport { resolve } from 'path';\n\n// Load environment variables from .env.local\nconfig({ path: resolve(process.cwd(), '.env.local') });\n\n// Mock quiz answers\nconst mockQuizAnswers = {\n  childhoodInterests: \"Making paper boats during monsoon\",\n  favoriteToy: \"Carrom board\",\n  childhoodAspiration: \"Engineer\",\n  spendingPreference: \"Latest smartphone + Jio recharge\",\n  inspirationalStatement: \"I fixed the village water-pump wiring myself.\",\n  idealDailyVibe: \"Small chai-break team of 4 friends\",\n  nonNegotiables: \"Remote job from hometown\",\n  publicSpeaking: \"3\",\n  secretChoice: \"Software developer\",\n  goalOwnership: \"4\"\n};\n\n// Test data\nconst testData = {\n  quizAnswers: mockQuizAnswers\n};\n\nconsole.log(\"Testing AI API route with mock quiz answers...\");\nconsole.log(\"Making direct call to Gemini API to verify rate limit issue...\");\n\n// Import the actual function from aiService\nconst { generatePersonaAndRoles } = await import('./src/lib/aiService.ts');\n\ntry {\n  const result = await generatePersonaAndRoles(mockQuizAnswers);\n  console.log(\"AI Service Response:\");\n  console.log(JSON.stringify(result, null, 2));\n  \n  // Check if this is the fallback data\n  if (result.personaName === \"The Adaptive Explorer\") {\n    console.log(\"\\n⚠️  WARNING: Received fallback data instead of AI-generated content\");\n    console.log(\"This indicates the AI service is rate-limited or experiencing issues.\");\n  } else {\n    console.log(\"\\n✅ Received AI-generated content\");\n  }\n} catch (error) {\n  console.error(\"Error calling AI service:\", error);\n}