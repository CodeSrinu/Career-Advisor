// src/app/learning-path/page.tsx\n'use client';\n\nimport { useState, useEffect } from 'react';\nimport { useSearchParams, useRouter } from 'next/navigation';\nimport LearningPathDisplay from '@/components/mobile/LearningPathDisplay';\nimport { generateLearningPath, LearningPath } from '@/lib/learningPath';\nimport { SkillAssessmentResult } from '@/lib/skillAssessment';\n\nexport default function LearningPathPage() {\n  const router = useRouter();\n  const searchParams = useSearchParams();\n  const roleId = searchParams.get('roleId') || '';\n  const roleName = searchParams.get('roleName') || '';\n  const domainId = searchParams.get('domainId') || '';\n  const skillLevel = parseInt(searchParams.get('skillLevel') || '1');\n  \n  const [learningPath, setLearningPath] = useState<LearningPath | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const loadLearningPath = async () => {
      try {
        setLoading(true);
        // Use the skillLevel from URL params to determine the appropriate learning path
        const path = await generateLearningPath(roleId, roleName, skillLevel, []);
        setLearningPath(path);
      } catch (err) {
        console.error('Error loading learning path:', err);
        setError('Failed to generate your personalized learning path. Please try again.');
      } finally {
        setLoading(false);
      }
    };

    if (roleId || domainId) {
      loadLearningPath();
    }
  }, [roleId, roleName, domainId, skillLevel]);\n\n  const handleBack = () => {\n    router.back();\n  };\n\n  const handleStartStep = (stepId: string) => {\n    // In a real implementation, you would navigate to the specific step\n    alert(`Starting step: ${stepId}\\n\\nIn a full implementation, you would begin this learning activity.`);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-white flex flex-col\">\n        {/* Header */}\n        <header className=\"p-4 bg-white border-b border-gray-200\">\n          <div className=\"flex items-center\">\n            <div className=\"flex-1 text-center\">\n              <h1 className=\"text-lg font-bold text-gray-800\">Generating Your Learning Path</h1>\n            </div>\n          </div>\n        </header>\n\n        {/* Loading Content */}\n        <main className=\"flex-1 overflow-y-auto p-6 flex items-center justify-center\">\n          <div className=\"text-center\">\n            <div className=\"inline-block animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-green-500 mb-4\"></div>\n            <p className=\"text-gray-600\">Creating your personalized learning path...</p>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen bg-white flex flex-col items-center justify-center p-4\">\n        <div className=\"text-center\">\n          <div className=\"bg-red-100 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <svg className=\"w-8 h-8 text-red-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\" />\n            </svg>\n          </div>\n          <h2 className=\"text-2xl font-bold text-gray-800 mb-2\">Error Loading Learning Path</h2>\n          <p className=\"text-gray-600 mb-6\">{error}</p>\n          <button\n            className=\"px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors\"\n            onClick={() => router.push('/')}>\n            Back to Home\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  if (!learningPath) {\n    return (\n      <div className=\"min-h-screen bg-white flex flex-col items-center justify-center p-4\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-gray-800 mb-2\">Learning Path Not Found</h1>\n          <p className=\"text-gray-600 mb-6\">We couldn't generate a learning path for your selections.</p>\n          <button\n            className=\"px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors\"\n            onClick={() => router.push('/')}>\n            Back to Home\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-white\">\n      <LearningPathDisplay\n        learningPath={learningPath}\n        onBack={handleBack}\n        onStartStep={handleStartStep}\n      />\n    </div>\n  );\n}\n